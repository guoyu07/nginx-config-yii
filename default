# /etc/nginx/sites-available/default (on ubuntu)
# You may add here your
# server {
#	...
# }
# statements for each of your virtual hosts to this file

##
# You should look at the following URL's in order to grasp a solid understanding
# of Nginx configuration files in order to fully unleash the power of Nginx.
# http://wiki.nginx.org/Pitfalls
# http://wiki.nginx.org/QuickStart
# http://wiki.nginx.org/Configuration
#
# Generally, you will want to move this file somewhere, and start with a clean
# file but keep this around for reference. Or just disable in sites-enabled.
#
# Please see /usr/share/doc/nginx-doc/examples/ for more detailed examples.
##

server {
	
	listen   80; ## listen for ipv4; this line is default and implied
	set $host_path "/server/public";
	access_log /server/log/access.log; 
	#listen   [::]:80 default ipv6only=on; ## listen for ipv6

	root $host_path;
	set $yii_bootstrap "index.php";
	charset utf-8;
 
	#/usr/share/nginx/www;:
     

	# Make site accessible from http://localhost/
	server_name oapp-webclient.cloudapp.net;

	location / {
		# First attempt to serve request as file, then
		# as directory, then fall back to index.html
       	        index index.html index.htm $yii_bootstrap;
		try_files $uri $uri/ /$yii_bootstrap?$args;
		
		# Uncomment to enable naxsi on this location
		# include /etc/nginx/naxsi.rules
	}

	location /doc/ {
		alias /usr/share/doc/;
		autoindex on;
		allow 127.0.0.1;
		deny all;
	}
	location ~ ^/(protected|framework|themes/\w+/views) {
		deny all;
	}
	#avoid processing of calls to unexisting static files by yii
	location ~ \.(js|css|png|jpg|gif|swf|ico|pdf|mov|fla|zip|rar)$ {
		try_files $uri =404;
	}
	# Only for nginx-naxsi : process denied requests
	#location /RequestDenied {
		# For example, return an error code
		#return 418;
	#}

	#error_page 404 /404.html;

	# redirect server error pages to the static page /50x.html
	#
	error_page 500 502 503 504 /50x.html;
	location = /50x.html {
		root /usr/share/nginx/www;
	}

	# pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
	#
	location ~ \.php$ {
		fastcgi_split_path_info ^(.+\.php)(/.+)$;
		# NOTE: You should have "cgi.fix_pathinfo = 0;" in php.ini
	#
		#let yii catch the calls to unexisting php files
		set $fsn /$yii_bootstrap;
			
	#	# With php5-cgi alone:
	#	fastcgi_pass 127.0.0.1:9000;
	#	fastcgi_index index.php;
	#	# With php5-fpm:
		fastcgi_pass unix:/var/run/php5-fpm.sock;
		if (-f $document_root$fastcgi_script_name) {	
			set $fsn $fastcgi_script_name;
		}
		fastcgi_param SCRIPT_FILENAME $document_root$fsn;
		#fastcgi_index index.php;
		#PATH_INFO and PATH_TRANSLATED can be ommitted but RFC 3875 specs them for CGI
		fastcgi_param PATH_INFO	$fastcgi_path_info;
		fastcgi_param PATH_TRANSLATED $document_root$fsn;

		include fastcgi_params;
	}

	# deny access to .htaccess files, if Apache's document root
	# concurs with nginx's one
	#
	location ~ /\.ht {
		deny all;
	}
}


# another virtual host using mix of IP-, name-, and port-based configuration
#
#server {
#	listen 8000;
#	listen somename:8080;
#	server_name somename alias another.alias;
#	root html;
#	index index.html index.htm;
#
#	location / {
#		try_files $uri $uri/ /index.html;
#	}
#}


# HTTPS server
#
#server {
#	listen 443;
#	server_name localhost;
#
#	root html;
#	index index.html index.htm;
#
#	ssl on;
#	ssl_certificate cert.pem;
#	ssl_certificate_key cert.key;
#
#	ssl_session_timeout 5m;
#
#	ssl_protocols SSLv3 TLSv1;
#	ssl_ciphers ALL:!ADH:!EXPORT56:RC4+RSA:+HIGH:+MEDIUM:+LOW:+SSLv3:+EXP;
#	ssl_prefer_server_ciphers on;
#
#	location / {
#		try_files $uri $uri/ /index.html;
#	}
#}
